local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")
local vehicleSeat = character:FindFirstChild("VehicleSeat")

-- Adjustments for controlled, smooth turning
local maxTurnSpeed = math.rad(45)  -- A good turn speed limit to prevent spinning
local lerpFactor = 0.1             -- Moderate smoothness for smoother control
local angleDamping = 0.8           -- Damping factor to control quick turns and reduce spinning
local currentAngle = 0             -- Store current rotation angle

-- Function to handle only forward/backward movement with LT/RT
local function controlMovement()
    if vehicleSeat then
        local throttle = vehicleSeat.Throttle
        if throttle ~= 0 then
            local direction = Vector3.new(0, 0, throttle)
            vehicleSeat.CFrame = vehicleSeat.CFrame * CFrame.new(direction * throttle)
        end
    end
end

-- Improved rotation function with damping to avoid spinning out
local function controlRotation()
    local moveDirection = Vector3.new(humanoid.MoveDirection.X, 0, humanoid.MoveDirection.Z)
    local moveMagnitude = moveDirection.magnitude

    -- Only rotate if there's input from the left joystick
    if moveMagnitude > 0 then
        local targetAngle = math.atan2(moveDirection.X, moveDirection.Z)
        local angleDifference = targetAngle - currentAngle

        -- Normalize angle difference to the range -π to π to prevent spinning
        angleDifference = (angleDifference + math.pi) % (2 * math.pi) - math.pi

        -- Apply damping to limit turn speed, preventing overshoot and spinning
        angleDifference = angleDifference * angleDamping

        -- Smoothly interpolate towards the target angle with controlled speed
        currentAngle = currentAngle + math.clamp(angleDifference, -maxTurnSpeed, maxTurnSpeed) * lerpFactor

        -- Wrap the angle between -π and π for consistent rotation
        if currentAngle > math.pi then
            currentAngle = currentAngle - 2 * math.pi
        elseif currentAngle < -math.pi then
            currentAngle = currentAngle + 2 * math.pi
        end

        -- Set the controlled rotation
        local directionVector = Vector3.new(math.sin(currentAngle), 0, math.cos(currentAngle))
        humanoidRootPart.CFrame = humanoidRootPart.CFrame:Lerp(CFrame.new(humanoidRootPart.Position, humanoidRootPart.Position + directionVector), lerpFactor)
    end
end

-- Main loop to run each frame
RunService.RenderStepped:Connect(function()
    controlMovement()  -- Handle forward/backward motion with LT/RT without affecting rotation
    controlRotation()  -- Smoothly rotate based only on left joystick input
end)
